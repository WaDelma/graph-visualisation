<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="11.5.1">
  <zoom_level>10</zoom_level>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>450</x>
      <y>320</y>
      <w>151</w>
      <h>31</h>
    </coordinates>
    <panel_attributes>// Modify the text below and
// observe the element preview.

GraphVisualisation</panel_attributes>
    <additional_attributes/>
    <custom_code>//This is a tutorial for a self resizing component 
//In addition you are able to resize at manually
//As soon as it is resized manually a new text is
//added to the property panel
setAutoresize(20,20,10);

int y=textHeight();

boolean center = true;
for(int i = 0; i &lt; textlines.size(); i++) {
	String textline = textlines.get(i);
	if(textline.equals("--")) {
		drawLineHorizontal((int) (y-textHeight()*0.7));
		center = false;
		if (!isManualResized()) height -= (int) (textHeight()*0.75);
		y += textHeight()*0.3;
	}
	else {
		if (center) y += printCenter(textline,y); 
		else y += printLeft(textline,y);
	}
}

drawRectangle(0,0,onGrid(width),onGrid(height));</custom_code>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>700</x>
      <y>320</y>
      <w>161</w>
      <h>31</h>
    </coordinates>
    <panel_attributes>// Modify the text below and
// observe the element preview.

UIGraphVisualisation</panel_attributes>
    <additional_attributes/>
    <custom_code>//This is a tutorial for a self resizing component 
//In addition you are able to resize at manually
//As soon as it is resized manually a new text is
//added to the property panel
setAutoresize(20,20,10);

int y=textHeight();

boolean center = true;
for(int i = 0; i &lt; textlines.size(); i++) {
	String textline = textlines.get(i);
	if(textline.equals("--")) {
		drawLineHorizontal((int) (y-textHeight()*0.7));
		center = false;
		if (!isManualResized()) height -= (int) (textHeight()*0.75);
		y += textHeight()*0.3;
	}
	else {
		if (center) y += printCenter(textline,y); 
		else y += printLeft(textline,y);
	}
}

drawRectangle(0,0,onGrid(width),onGrid(height));</custom_code>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>350</x>
      <y>430</y>
      <w>61</w>
      <h>31</h>
    </coordinates>
    <panel_attributes>// Modify the text below and
// observe the element preview.

Graph</panel_attributes>
    <additional_attributes/>
    <custom_code>//This is a tutorial for a self resizing component 
//In addition you are able to resize at manually
//As soon as it is resized manually a new text is
//added to the property panel
setAutoresize(20,20,10);

int y=textHeight();

boolean center = true;
for(int i = 0; i &lt; textlines.size(); i++) {
	String textline = textlines.get(i);
	if(textline.equals("--")) {
		drawLineHorizontal((int) (y-textHeight()*0.7));
		center = false;
		if (!isManualResized()) height -= (int) (textHeight()*0.75);
		y += textHeight()*0.3;
	}
	else {
		if (center) y += printCenter(textline,y); 
		else y += printLeft(textline,y);
	}
}

drawRectangle(0,0,onGrid(width),onGrid(height));</custom_code>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>570</x>
      <y>290</y>
      <w>154</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
&lt;&lt;creates&gt;&gt;</panel_attributes>
    <additional_attributes>130;50;30;50</additional_attributes>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>300</x>
      <y>290</y>
      <w>170</w>
      <h>160</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
&lt;&lt;creates&gt;&gt;</panel_attributes>
    <additional_attributes>80;140;80;50;150;50</additional_attributes>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>520</x>
      <y>430</y>
      <w>131</w>
      <h>51</h>
    </coordinates>
    <panel_attributes>// Modify the text below and
// observe the element preview.

GraphGenerator
--
generate()</panel_attributes>
    <additional_attributes/>
    <custom_code>//This is a tutorial for a self resizing component 
//In addition you are able to resize at manually
//As soon as it is resized manually a new text is
//added to the property panel
setAutoresize(20,20,10);

int y=textHeight();

boolean center = true;
for(int i = 0; i &lt; textlines.size(); i++) {
	String textline = textlines.get(i);
	if(textline.equals("--")) {
		drawLineHorizontal((int) (y-textHeight()*0.7));
		center = false;
		if (!isManualResized()) height -= (int) (textHeight()*0.75);
		y += textHeight()*0.3;
	}
	else {
		if (center) y += printCenter(textline,y); 
		else y += printLeft(textline,y);
	}
}

drawRectangle(0,0,onGrid(width),onGrid(height));</custom_code>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>510</x>
      <y>320</y>
      <w>154</w>
      <h>130</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
&lt;&lt;creates&gt;&gt;</panel_attributes>
    <additional_attributes>80;110;80;30</additional_attributes>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>380</x>
      <y>400</y>
      <w>160</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>lt=&lt;-

&lt;&lt;uses&gt;&gt;</panel_attributes>
    <additional_attributes>30;50;140;50</additional_attributes>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>620</x>
      <y>320</y>
      <w>166</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>lt=&lt;-

&lt;&lt;uses&gt;&gt;</panel_attributes>
    <additional_attributes>30;130;100;130;100;30</additional_attributes>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>450</x>
      <y>500</y>
      <w>171</w>
      <h>71</h>
    </coordinates>
    <panel_attributes>// Modify the text below and
// observe the element preview.

GraphVisualCalculator
--
initialise()
calculateStep()</panel_attributes>
    <additional_attributes/>
    <custom_code>//This is a tutorial for a self resizing component 
//In addition you are able to resize at manually
//As soon as it is resized manually a new text is
//added to the property panel
setAutoresize(20,20,10);

int y=textHeight();

boolean center = true;
for(int i = 0; i &lt; textlines.size(); i++) {
	String textline = textlines.get(i);
	if(textline.equals("--")) {
		drawLineHorizontal((int) (y-textHeight()*0.7));
		center = false;
		if (!isManualResized()) height -= (int) (textHeight()*0.75);
		y += textHeight()*0.3;
	}
	else {
		if (center) y += printCenter(textline,y); 
		else y += printLeft(textline,y);
	}
}

drawRectangle(0,0,onGrid(width),onGrid(height));</custom_code>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>420</x>
      <y>320</y>
      <w>154</w>
      <h>200</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
&lt;&lt;creates&gt;&gt;</panel_attributes>
    <additional_attributes>80;180;80;30</additional_attributes>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>590</x>
      <y>320</y>
      <w>266</w>
      <h>220</h>
    </coordinates>
    <panel_attributes>lt=&lt;-

&lt;&lt;uses&gt;&gt;</panel_attributes>
    <additional_attributes>30;200;200;200;200;30</additional_attributes>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>350</x>
      <y>620</y>
      <w>81</w>
      <h>31</h>
    </coordinates>
    <panel_attributes>// Modify the text below and
// observe the element preview.

HashMap</panel_attributes>
    <additional_attributes/>
    <custom_code>//This is a tutorial for a self resizing component 
//In addition you are able to resize at manually
//As soon as it is resized manually a new text is
//added to the property panel
setAutoresize(20,20,10);

int y=textHeight();

boolean center = true;
for(int i = 0; i &lt; textlines.size(); i++) {
	String textline = textlines.get(i);
	if(textline.equals("--")) {
		drawLineHorizontal((int) (y-textHeight()*0.7));
		center = false;
		if (!isManualResized()) height -= (int) (textHeight()*0.75);
		y += textHeight()*0.3;
	}
	else {
		if (center) y += printCenter(textline,y); 
		else y += printLeft(textline,y);
	}
}

drawRectangle(0,0,onGrid(width),onGrid(height));</custom_code>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>400</x>
      <y>540</y>
      <w>110</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>30;90;90;90;90;30</additional_attributes>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>280</x>
      <y>420</y>
      <w>90</w>
      <h>230</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>70;210;30;210;30;30;70;30</additional_attributes>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>140</x>
      <y>440</y>
      <w>131</w>
      <h>31</h>
    </coordinates>
    <panel_attributes>// Modify the text below and
// observe the element preview.

ArrayDequeList</panel_attributes>
    <additional_attributes/>
    <custom_code>//This is a tutorial for a self resizing component 
//In addition you are able to resize at manually
//As soon as it is resized manually a new text is
//added to the property panel
setAutoresize(20,20,10);

int y=textHeight();

boolean center = true;
for(int i = 0; i &lt; textlines.size(); i++) {
	String textline = textlines.get(i);
	if(textline.equals("--")) {
		drawLineHorizontal((int) (y-textHeight()*0.7));
		center = false;
		if (!isManualResized()) height -= (int) (textHeight()*0.75);
		y += textHeight()*0.3;
	}
	else {
		if (center) y += printCenter(textline,y); 
		else y += printLeft(textline,y);
	}
}

drawRectangle(0,0,onGrid(width),onGrid(height));</custom_code>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>240</x>
      <y>420</y>
      <w>130</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>30;30;70;30;110;30</additional_attributes>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>310</x>
      <y>430</y>
      <w>160</w>
      <h>130</h>
    </coordinates>
    <panel_attributes>lt=&lt;-

&lt;&lt;uses&gt;&gt;</panel_attributes>
    <additional_attributes>70;30;70;110;140;110</additional_attributes>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>700</x>
      <y>530</y>
      <w>191</w>
      <h>51</h>
    </coordinates>
    <panel_attributes>// Modify the text below and
// observe the element preview.

PanelGraphVisualisation
--
paintComponent()</panel_attributes>
    <additional_attributes/>
    <custom_code>//This is a tutorial for a self resizing component 
//In addition you are able to resize at manually
//As soon as it is resized manually a new text is
//added to the property panel
setAutoresize(20,20,10);

int y=textHeight();

boolean center = true;
for(int i = 0; i &lt; textlines.size(); i++) {
	String textline = textlines.get(i);
	if(textline.equals("--")) {
		drawLineHorizontal((int) (y-textHeight()*0.7));
		center = false;
		if (!isManualResized()) height -= (int) (textHeight()*0.75);
		y += textHeight()*0.3;
	}
	else {
		if (center) y += printCenter(textline,y); 
		else y += printLeft(textline,y);
	}
}

drawRectangle(0,0,onGrid(width),onGrid(height));</custom_code>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>820</x>
      <y>320</y>
      <w>50</w>
      <h>230</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
</panel_attributes>
    <additional_attributes>30;210;30;30</additional_attributes>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>590</x>
      <y>500</y>
      <w>136</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>lt=&lt;-

&lt;&lt;uses&gt;&gt;</panel_attributes>
    <additional_attributes>30;50;110;50</additional_attributes>
  </element>
</diagram>
